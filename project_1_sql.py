# -*- coding: utf-8 -*-
"""project 1-sql

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q47s7Udnn1OKctM9f6Q2lFJ1U7sRPN9B
"""

!pip install langchain langgraph sqlalchemy streamlit

import sqlite3

def initialize_db():
    # Step 1: Connect to SQLite database (file will be created if it doesn't exist)
    conn = sqlite3.connect("company_db.db")
    cursor = conn.cursor()

    # Step 2: Create tables
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS customers (
            customer_id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            email TEXT NOT NULL,
            phone TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            product_id INTEGER PRIMARY KEY,
            product_name TEXT NOT NULL,
            price REAL NOT NULL,
            stock_quantity INTEGER NOT NULL
        );
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            order_id INTEGER PRIMARY KEY,
            customer_id INTEGER,
            product_id INTEGER,
            quantity INTEGER NOT NULL,
            order_date TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(customer_id) REFERENCES customers(customer_id),
            FOREIGN KEY(product_id) REFERENCES products(product_id)
        );
    """)

    # Step 3: Insert sample data
    cursor.executemany("""
        INSERT INTO customers (name, email, phone) VALUES (?, ?, ?)
    """, [
        ("Alice", "alice@example.com", "1234567890"),
        ("Bob", "bob@example.com", "9876543210"),
        ("Charlie", "charlie@example.com", "5555555555")
    ])

    cursor.executemany("""
        INSERT INTO products (product_name, price, stock_quantity) VALUES (?, ?, ?)
    """, [
        ("Laptop", 1200.50, 10),
        ("Smartphone", 799.99, 20),
        ("Headphones", 150.00, 50)
    ])

    cursor.executemany("""
        INSERT INTO orders (customer_id, product_id, quantity) VALUES (?, ?, ?)
    """, [
        (1, 1, 1),
        (2, 2, 2),
        (3, 3, 3)
    ])

    # Step 4: Commit changes and close connection
    conn.commit()
    conn.close()

# Run the function to initialize the database
initialize_db()
print("Database initialized!")

import sqlite3

def fetch_all_data():
    conn = sqlite3.connect("company_db.db")
    cursor = conn.cursor()

    print("Customers:")
    for row in cursor.execute("SELECT * FROM customers"):
        print(row)

    print("\nProducts:")
    for row in cursor.execute("SELECT * FROM products"):
        print(row)

    print("\nOrders:")
    for row in cursor.execute("SELECT * FROM orders"):
        print(row)

    conn.close()

# Fetch data to verify
fetch_all_data()

!pip install langchain_community

from langchain import PromptTemplate, LLMChain
from langchain.llms import OpenAI


# Initialize OpenAI with API key
llm = OpenAI(temperature=0, openai_api_key="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")


template = """
You are an expert SQL translator. Translate the following natural language query into a SQL query:
Query: {query}
"""

prompt = PromptTemplate(template=template, input_variables=["query"])
chain = LLMChain(llm=llm, prompt=prompt)

def natural_to_sql(nl_query):
    try:
        sql_query = chain.run({"query": nl_query})
        return sql_query
    except Exception as e:
        return str(e)

# Test the function
nl_query = "Show all customers who purchased a Laptop."
sql_query = natural_to_sql(nl_query)
print("Generated SQL:", sql_query)

import streamlit as st
import sqlite3

# Streamlit UI
st.title("Intelligent Database Agent")
st.text_input("Enter your natural language query:", key="query")

if st.button("Run Query"):
    nl_query = st.session_state.query
    sql_query = natural_to_sql(nl_query)

    st.write("Generated SQL Query:")
    st.code(sql_query)

    # Execute SQL
    try:
        conn = sqlite3.connect("company_db.db")
        cursor = conn.cursor()
        cursor.execute(sql_query)
        results = cursor.fetchall()
        conn.close()

        # Display results
        st.write("Query Results:")
        st.dataframe(results)
    except Exception as e:
        st.error(f"Error: {e}")

!streamlit run app.py

!streamlit run "project 1-sql.py"